<!DOCTYPE html>
<html lang="ja">

<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>買い物リスト</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        .btn-icon {
            --bs-btn-padding-x: .2rem;
            --bs-btn-padding-y: .2rem;
            --bs-btn-border-width: 0px;
        }

        [disabled] {
            filter: grayscale(100%);
        }
    </style>
</head>

<body>
    <div class="p-0 container" data-id="root">
    </div>
    <script src="https://code.jquery.com/jquery-3.7.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        class Ingredient {
            constructor({ id, name, amount, unit, belongingTo }) {
                this.id = id ?? `ingredient-${window.crypto.randomUUID()}`;
                this.name = name;
                this.amount = amount;
                this.unit = unit;
                this.belongingTo = belongingTo;
            }
        }
        class AggregatedItem {
            constructor({ id = `aggregated-item-${window.crypto.randomUUID()}`, items = [] }) {
                this.id = id;
                this.items = items;
            }

            get name() {
                return this.items[0].name;
            }
            get amount() {
                return this.items.reduce((total, item) => total + item.amount, 0);
            }
            get unit() {
                return this.items[0].unit;
            }

            toString() {
                return `${this.name} ... ${this.amount} ${this.unit}`;
            }
        }
        class Recipe {
            constructor({ id, name }) {
                this.id = id ?? `recipe-${window.crypto.randomUUID()}`;
                this.name = name;
            }
        }
        class Model {
            constructor() {
                this.recipes = [];
                this.ingredients = [];
                this.selectedItemGroups = [];
                this.shoppingItems = [];
            }
        }

        class ShoppingListView {
            constructor(controller, model) {
                this.controller = controller;
                this.model = model;
                this.$element = $('<div>');
                this.update();
            }

            update() {
                this.$element.empty();
                this.$element.html(this.model.shoppingItems.map(i => i.toString()).join('<br>'));
            }
        }

        class RecipeSelectionView {
            constructor(controller, model) {
                this.controller = controller;
                this.model = model;
                this.$element = $('<div>');
                this.update();
            }

            update() {
                const myself = this;
                this.$element.empty();
                this.$element.append(
                    this.model.recipes.map(recipe =>
                        $('<div>').append(
                            $('<input>')
                                .addClass('form-check-input')
                                .attr({ type: 'checkbox', id: recipe.id })
                                .data({ model: recipe })
                                .change(function () {
                                    $(this).prop('checked')
                                        ? myself.controller.addIngreditsToShoppingList($(this).data('model'))
                                        : myself.controller.removeIngreditsToShoppingList($(this).data('model'));
                                }),
                            $('<label>')
                                .addClass('form-check-label')
                                .attr({ for: recipe.id })
                                .text(recipe.name))),
                    $('<button>')
                        .addClass('btn')
                        .attr({ type: 'button' })
                        .text('追加'));
            }
        }

        class Controller {
            constructor(model) {
                const myself = this;
                this.model = model;
                this.shoppingListView = new ShoppingListView(this, model);
                this.recipeSelectionView = new RecipeSelectionView(this, model);
                $('[data-id="root"]').append(
                    $('<button>')
                        .addClass('btn')
                        .attr({ type: 'button' })
                        .text('コピー')
                        .click(function () {
                            const text = myself.model.shoppingItems.map(i => i.toString()).join('\n');
                            navigator.clipboard.writeText(text);
                        }));
                $('[data-id="root"]').append(this.shoppingListView.$element);
                $('[data-id="root"]').append(this.recipeSelectionView.$element);
            }

            addIngreditsToShoppingList(itemGroup) {
                this.model.selectedItemGroups.push(itemGroup);
                this.updateShoppingItems();
            }
            removeIngreditsToShoppingList(itemGroup) {
                this.model.selectedItemGroups = this.model.selectedItemGroups.filter(g => g != itemGroup)
                this.updateShoppingItems();
            }
            updateShoppingItems() {
                this.model.shoppingItems = 
                    Object.values(
                        Object.groupBy(
                            this.model.selectedItemGroups.flatMap(g => this.model.ingredients.filter(i => i.belongingTo == g)),
                            ({ name, unit }) => [name, unit]))
                    .map(groupedItems => new AggregatedItem({ items: groupedItems }))
                this.shoppingListView.update();
                console.log(this.model);
            }
        }

        $(function () {
            if (Object.groupBy === undefined) {
                Object.groupBy = function (items, callbackFn) {
                    groupedItems = {};
                    items.forEach(item => {
                        key = `${callbackFn.call(this, item)}`;
                        if (!(key in groupedItems)) {
                            groupedItems[key] = [];
                        }
                        groupedItems[key].push(item);
                    });
                    return groupedItems;
                }
            }

            if (window.crypto.randomUUID === undefined) {
                window.crypto.randomUUID = function () {
                    random_numbers = new Uint8Array(16);
                    myself.crypto.getRandomValues(random_numbers);
                    random_numbers[6] = 0x40 | (random_numbers[6] & 0x0f);
                    random_numbers[8] = 0x80 | (random_numbers[8] & 0x3f);
                    random_numbers = Array.from(random_numbers);
                    return 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'.replaceAll('xx', s => random_numbers.shift().toString(16).padStart(2, '0'));
                }
            }

            if (navigator.clipboard === undefined) {
                navigator.clipboard = new Object();
            }
            if (navigator.clipboard.writeText === undefined) {
                navigator.clipboard.writeText = function (text) {
                    const $textarea = $('<textarea>').val(text);
                    const $element = $('<div>').append($textarea);
                    $('body').append($element);
                    const selection = window.getSelection();
                    selection.selectAllChildren($element[0]);
                    document.execCommand('copy');
                    $element.remove();
                }
            }

            const initial_data = {
                インドカレー: [
                    ['鶏もも肉', 300, 'g'],
                    ['玉ねぎ', 1, '個'],
                    ['ニンジン', 1, '本'],
                    ['トマト缶', 1, '缶'],
                ],
                ベーコンとほうれん草: [
                    ['平ベーコン', 1, 'パック'],
                    ['冷凍ほうれん草', 0.5, '袋'],
                    ['厚あげ', 1, '個'],
                    ['かつお節', 1, '袋'],
                ],
                鮭しめじ: [
                    ['鮭', 2, '切れ'],
                    ['しめじ', 2, '株'],
                ],
                プルコギ: [
                    ['豚こま', 250, 'g'],
                    ['ニンジン', 1, '本'],
                    ['ピーマン', 4, '個'],
                ],
                豚キャベツ: [
                    ['豚こま', 250, 'g'],
                    ['キャベツ', 0.25, '個'],
                ],
                豚生姜焼き: [
                    ['豚こま', 250, 'g'],
                    ['玉ねぎ', 1, '個'],
                    ['刻み青ねぎ', 1, 'パック'],
                ],
                鶏ねぎ: [
                    ['鶏もも肉', 300, 'g'],
                    ['白ねぎ', 1, '本'],
                ],
                ナポリタン: [
                    ['ソーセージ', 1, '袋'],
                    ['エリンギ', 1, '個'],
                    ['ピーマン', 4, '個'],
                    ['グラタンの素', 1, '箱'],
                ],
                ラザニア: [
                    ['合挽肉', 300, 'g'],
                    ['ラザニアの素', 1, '箱'],
                    ['刻みチーズ', 1, '袋'],
                ],
                オムライス: [
                    ['ソーセージ', 1, '袋'],
                    ['マッシュルーム', 100, 'g'],
                    ['コーン缶', 1, '缶'],
                    ['卵', 3, '個'],
                    ['バター', 2, '個'],
                ],
                ドリア: [
                    ['ソーセージ', 1, '袋'],
                    ['マッシュルーム', 100, 'g'],
                    ['刻みチーズ', 1, '袋'],
                    ['卵', 2, '個'],
                ],
                三食丼: [
                    ['鶏もも挽肉', 250, 'g'],
                    ['冷凍ほうれん草', 0.5, '袋'],
                    ['卵', 3, '個'],
                ],
                焼きそば: [
                    ['豚こま', 250, 'g'],
                    ['焼きそば麺', 1.5, '袋'],
                    ['カット野菜', 1, '袋'],
                ],
                グラタン: [
                    ['鶏もも肉', 200, 'g'],
                    ['玉ねぎ', 1, '個'],
                    ['グラタンの素', 1, '箱'],
                    ['刻みチーズ', 1, '袋'],
                    ['バター', 2, '個'],
                ],
            };
            model = new Model();
            model.recipes.splice(model.recipes.length, 0, ...Object.keys(initial_data).map(name => new Recipe({ name: name })));
            model.ingredients.splice(model.ingredients.length, 0, ...model.recipes.flatMap(
                list => initial_data[list.name].map(p => new Ingredient({ name: p[0], amount: p[1], unit: p[2], belongingTo: list }))
            ));
            console.log(model);

            controller = new Controller(model);
        })
    </script>
</body>

</html>