<!DOCTYPE html>
<html lang="ja">

<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>買い物リスト</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        .btn-icon {
            --bs-btn-padding-x: .2rem;
            --bs-btn-padding-y: .2rem;
            --bs-btn-border-width: 0px;
        }

        [disabled] {
            filter: grayscale(100%);
        }
    </style>
</head>

<body>
    <div class="p-0 container" data-id="root">
    </div>
    <script src="https://code.jquery.com/jquery-3.7.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        class Ingredient {
            constructor({ name, amount, unit, belongingTo }) {
                this.name = name;
                this.amount = amount;
                this.unit = unit;
                this.belongingTo = belongingTo;
            }
        }
        class Recipe {
            constructor({ name }) {
                this.name = name;
            }
        }
        class Model {
            constructor() {
                this.recipes = [];
                this.ingredients = [];
            }
        }

        class ShoppingList {
            constructor(ingredients) {
                this.$element = $('div').html(
                    Object.values(Object.groupBy(ingredients, ({ name, unit }) => [name, unit]))
                        .flatMap(grouped_ingredients => {
                            const name = grouped_ingredients[0].name;
                            const total_amount = grouped_ingredients.reduce((accumulator, ingredient) => accumulator + ingredient.amount, 0);
                            const unit = grouped_ingredients[0].unit;
                            return `${name} ... ${total_amount} ${unit}`;
                        })
                        .join('<br>'));
            }
        }

        $(function () {
            const initial_data = {
                インドカレー: [
                    ['鶏もも肉', 250, 'g'],
                    ['玉ねぎ', 1, '個'],
                    ['ニンジン', 1, '本'],
                    ['トマト缶', 1, '缶'],
                ],
                ベーコンとほうれん草: [
                    ['平ベーコン', 1, 'パック'],
                    ['冷凍ほうれん草', 0.5, '袋'],
                    ['厚あげ', 1, '個'],
                    ['かつお節', 1, '袋'],
                ],
                鮭しめじ: [
                    ['鮭', 2, '切れ'],
                    ['しめじ', 2, '株'],
                ],
                プルコギ: [
                    ['豚こま', 250, 'g'],
                    ['ニンジン', 1, '本'],
                    ['ピーマン', 1, '袋'],
                ],
                豚キャベツ: [
                    ['豚こま', 250, 'g'],
                    ['キャベツ', 0.25, '個'],
                ],
                豚生姜焼き: [
                    ['豚こま', 250, 'g'],
                    ['玉ねぎ', 1, '個'],
                    ['刻み青ねぎ', 1, 'パック'],
                ],
                鶏ねぎ: [
                    ['鶏もも肉', 250, 'g'],
                    ['白ねぎ', 1, '本'],
                ],
                ナポリタン: [
                    ['ソーセージ', 1, '袋'],
                    ['玉ねぎ', 1, '個'],
                    ['グラタンの素', 1, '箱'],
                ],
                ラザニア: [
                    ['合挽肉', 300, 'g'],
                    ['ラザニアの素', 1, '箱'],
                    ['刻みチーズ', 1, '袋'],
                ],
                オムライス: [
                    ['ソーセージ', 1, '袋'],
                    ['マッシュルーム', 100, 'g'],
                    ['卵', 3, '個'],
                    ['バター', 2, '個'],
                ],
                ドリア: [
                    ['ソーセージ', 1, '袋'],
                    ['マッシュルーム', 100, 'g'],
                    ['刻みチーズ', 1, '袋'],
                ],
                三食丼: [
                    ['鶏もも挽肉', 250, 'g'],
                    ['冷凍ほうれん草', 0.5, '袋'],
                    ['卵', 3, '個'],
                ],
                焼きそば: [
                    ['豚こま', 250, 'g'],
                    ['焼きそば麺', 1.5, '袋'],
                    ['カット野菜', 1, '袋'],
                ],
                グラタン: [
                    ['鶏もも肉', 250, 'g'],
                    ['玉ねぎ', 1, '個'],
                    ['グラタンの素', 1, '箱'],
                    ['刻みチーズ', 1, '袋'],
                    ['バター', 2, '個'],
                ],
            };
            model = new Model();
            model.recipes.splice(model.recipes.length, 0, ...Object.keys(initial_data).map(name => new Recipe({ name: name })));
            model.ingredients.splice(model.ingredients.length, 0, ...model.recipes.flatMap(
                list => initial_data[list.name].map(p => new Ingredient({ name: p[0], amount: p[1], unit: p[2], belongingTo: list }))
            ));
            console.log(model);

            shoppingList = new ShoppingList(model.ingredients);
            $('[data-id="root"]').append(shoppingList.$element);
        })
    </script>
</body>

</html>