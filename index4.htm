<!DOCTYPE html>
<html lang="ja">

<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>買い物リスト</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        .btn-icon {
            --bs-btn-padding-x: .2rem;
            --bs-btn-padding-y: .2rem;
            --bs-btn-border-width: 0px;
        }

        [disabled] {
            filter: grayscale(100%);
        }
    </style>
</head>

<body>
    <div data-id="rootContainer">
    </div>
    <script src="https://code.jquery.com/jquery-3.7.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const RuntimeConfiguration = {
            debugMode: true,
        };

        class Item {
            constructor({ id, name, amount, unit, belongingTo }) {
                this.id = id ?? `item-${window.crypto.randomUUID()}`;
                this.name = name;
                this.amount = Number(amount);
                this.unit = unit;
                this.belongingTo = belongingTo;
            }

            toString() {
                return `${this.name} ... ${this.amount} ${this.unit}`;
            }
        }
        class AggregatedItem {
            constructor({ id = `aggregated-item-${window.crypto.randomUUID()}`, items = [] }) {
                this.id = id;
                this.items = items;
            }

            get name() {
                return this.items[0].name;
            }
            get amount() {
                return this.items.reduce((total, item) => total + item.amount, 0);
            }
            get unit() {
                return this.items[0].unit;
            }

            toString() {
                return `${this.name} ... ${this.amount} ${this.unit}`;
            }
        }
        class ItemSet {
            constructor({ id, name }) {
                this.id = id ?? `itemSet-${window.crypto.randomUUID()}`;
                this.name = name;
            }
        }
        class Model {
            constructor() {
                this.itemSets = [];
                this.items = [];
                this.selectedItemSets = [];
                this.shoppingItems = [];
                this.stagedItems = [];
            }
        }

        class ShoppingListView {
            constructor(controller, model) {
                const myself = this;
                this.controller = controller;
                this.model = model;
                this.$itemContainer = $('<div>');
                this.$copyButton = $('<button>')
                    .addClass('btn')
                    .attr({ type: 'button' })
                    .text('コピー')
                    .click(function () {
                        console.log(myself);
                        myself.controller.writeCurrentShoppingListToClipboard();
                    });
                this.$element = $('<div>');
                this.$element.append(this.$itemContainer, this.$copyButton);
                this.update();
            }

            update() {
                this.$itemContainer.html(this.model.shoppingItems.map(i => i.toString()).join('<br>'));
            }
        }
        class ItemSetSelectionView {
            constructor(controller, model) {
                this.controller = controller;
                this.model = model;
                this.$element = $('<div>');
                this.update();
            }

            update() {
                const myself = this;
                this.$element.empty();
                this.$element.append(
                    this.model.itemSets.map(itemSet =>
                        $('<div>').append(
                            $('<input>')
                                .addClass('form-check-input')
                                .attr({ type: 'checkbox', id: itemSet.id })
                                .prop({ checked: this.model.selectedItemSets.includes(itemSet) })
                                .data({ model: itemSet })
                                .change(function () {
                                    $(this).prop('checked')
                                        ? myself.controller.addItemsToShoppingList($(this).data('model'))
                                        : myself.controller.removeItemsFromShoppingList($(this).data('model'));
                                }),
                            $('<label>')
                                .addClass('form-check-label')
                                .attr({ for: itemSet.id })
                                .text(itemSet.name))),
                    $('<button>')
                        .addClass('btn')
                        .attr({ type: 'button' })
                        .text('追加'));
            }
        }
        class ItemSetAdditionView {
            constructor(controller, model) {
                const myself = this;
                this.controller = controller;
                this.model = model;
                this.$nameInput = $('<input>')
                    .addClass('form-control')
                    .attr({ type: 'text' });
                this.$itemsContainer = $('<div>');
                this.$element = $('<div>')
                    .append(
                        this.$nameInput,
                        this.$itemsContainer,
                        $('<button>')
                            .addClass('btn')
                            .attr({ type: 'button' })
                            .text('追加2')
                            .click(function () {
                                myself.controller.addItemSet(myself.$nameInput.val(), myself.model.stagedItems);
                            }));
                this.update();
            }

            update() {
                this.$itemsContainer
                    .empty()
                    .append(this.model.stagedItems.map(item => $('<div>').text(item.toString())));
            }
        }
        class ItemAdditionView {
            constructor(controller, model) {
                this.controller = controller;
                this.model = model;
                this.$element = $('<div>');
                this.update();
            }

            update() {
                const myself = this;
                this.$nameInput = $('<input>')
                    .addClass('form-control')
                    .attr({ type: 'text' });
                this.$amountInput = $('<input>')
                    .addClass('form-control')
                    .attr({ type: 'text' });
                this.$unitInput = $('<input>')
                    .addClass('form-control')
                    .attr({ type: 'text' });
                this.$element.append(
                    this.$nameInput,
                    this.$amountInput,
                    this.$unitInput,
                    $('<button>')
                        .addClass('btn')
                        .attr({ type: 'button' })
                        .text('追加3')
                        .click(function () {
                            myself.controller.stageItem({
                                name: myself.$nameInput.val(),
                                amount: myself.$amountInput.val(),
                                unit: myself.$unitInput.val(),
                            });
                            console.log(myself.model);
                        }));
            }
        }

        class Controller {
            constructor(model) {
                const myself = this;
                this.model = model;
                this.shoppingListView = new ShoppingListView(this, model);
                this.itemSetSelectionView = new ItemSetSelectionView(this, model);
                this.itemSetAdditionView = new ItemSetAdditionView(this, model);
                this.itemAdditionView = new ItemAdditionView(this, model);
                this.$rootContainer = $('[data-id="rootContainer"]');
                if (!RuntimeConfiguration.debugMode) {
                    this.$rootContainer
                        .addClass('container')
                        .append(
                            this.itemSetAdditionView.$element,
                            this.shoppingListView.$element,
                            this.itemSetSelectionView.$element,
                            this.itemAdditionView);
                } else {
                    const paneCss = {
                        width: '230px',
                        'min-width': '230px',
                        'max-width': '230px',
                        height: '400px',
                        'min-height': '400px',
                        'max-height': '400px',
                        border: '1px solid red',
                    };
                    this.$rootContainer
                        .addClass('container-fluid')
                        .append(
                            $('<div>')
                                .addClass('row')
                                .append(
                                    $('<div>')
                                        .addClass('col')
                                        .css(paneCss)
                                        .append(this.shoppingListView.$element),
                                    $('<div>')
                                        .addClass('col')
                                        .css(paneCss)
                                        .append(this.itemSetSelectionView.$element),
                                    $('<div>')
                                        .addClass('col')
                                        .css(paneCss)
                                        .append(this.itemSetAdditionView.$element)),
                            $('<div>')
                                .addClass('row')
                                .append(
                                    $('<div>')
                                        .addClass('col')
                                        .css(paneCss)
                                        .append(this.itemAdditionView.$element)));
                }
            }

            updateView(...updatedModels) {
                const viewsToUpdate = [
                    [this.model.itemSets, [this.itemSetSelectionView]],
                    [this.model.items, [this.itemSetSelectionView]],
                    [this.model.selectedItemSets, [this.shoppingListView]],
                    [this.model.shoppingItems, [this.shoppingListView]],
                    [this.model.stagedItems, [this.itemSetAdditionView]],
                ]
                    .filter(e => updatedModels.includes(e[0]))
                    .flatMap(e => e[1])
                    .filter((v, i, a) => a.indexOf(v) === i);   // this code uniques views.
                console.log(this.model);
                console.log(viewsToUpdate);
                viewsToUpdate.forEach(v => v.update());
            }

            addItemsToShoppingList(itemSet) {
                this.model.selectedItemSets.push(itemSet);
                this.updateShoppingItems();
                this.updateView(this.model.selectedItemSets);
            }
            removeItemsFromShoppingList(itemSet) {
                this.model.selectedItemSets = this.model.selectedItemSets.filter(g => g != itemSet)
                this.updateShoppingItems();
                this.updateView(this.model.selectedItemSets);
            }
            updateShoppingItems() {
                this.model.shoppingItems =
                    Object.values(
                        Object.groupBy(
                            this.model.selectedItemSets.flatMap(g => this.model.items.filter(i => i.belongingTo == g)),
                            ({ name, unit }) => [name, unit]))
                        .map(groupedItems => new AggregatedItem({ items: groupedItems }))
                this.updateView(this.model.shoppingItems);
            }

            addItemSet(name, items = []) {
                const newItemSet = new ItemSet({ name: name });
                this.model.itemSets.push(newItemSet);
                console.log(items);
                this.model.items.push(...items.map(item => {
                    item.belongingTo = newItemSet;
                    return item;
                }));
                this.updateView(this.model.itemSets, this.model.items);
            }

            stageItem(itemParameters) {
                this.model.stagedItems.push(new Item(itemParameters));
                this.updateView(this.model.stagedItems);
            }

            writeCurrentShoppingListToClipboard() {
                const text = this.model.shoppingItems.map(i => i.toString()).join('\n');
                console.log('kita');
                console.log(this.model.shoppingItems);
                navigator.clipboard.writeText(text);
            }
        }

        function defineUnsupportedStandardMethods() {
            // iOS Safari 16 does not support Object.groupBy yet.
            if (Object.groupBy === undefined) {
                Object.groupBy = function (items, callbackFn) {
                    groupedItems = {};
                    items.forEach(item => {
                        key = callbackFn.call(this, item).toString();
                        if (!(key in groupedItems)) {
                            groupedItems[key] = [];
                        }
                        groupedItems[key].push(item);
                    });
                    return groupedItems;
                }
            }

            // iOS Safari 16 does not support window.crypto.randomUUID yet.
            if (window.crypto.randomUUID === undefined) {
                window.crypto.randomUUID = function () {
                    random_numbers = new Uint8Array(16);
                    window.crypto.getRandomValues(random_numbers);
                    random_numbers[6] = 0x40 | (random_numbers[6] & 0x0f);
                    random_numbers[8] = 0x80 | (random_numbers[8] & 0x3f);
                    random_numbers = Array.from(random_numbers);
                    return 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'.replaceAll('xx', s => random_numbers.shift().toString(16).padStart(2, '0'));
                }
            }

            // iOS Safari 16 does not support navigator.clipboard yet.
            if (navigator.clipboard === undefined) {
                navigator.clipboard = new Object();
            }
            if (navigator.clipboard.writeText === undefined) {
                navigator.clipboard.writeText = function (text) {
                    const $textarea = $('<textarea>').val(text);
                    const $element = $('<div>').append($textarea);
                    $('body').append($element);
                    const selection = window.getSelection();
                    selection.selectAllChildren($element[0]);
                    document.execCommand('copy');
                    $element.remove();
                }
            }
        }

        $(function () {
            defineUnsupportedStandardMethods();

            model = new Model();
            loadPresetData(model);
            console.log(model);

            controller = new Controller(model);
        })

        function loadPresetData(model) {
            const presetData = {
                インドカレー: [
                    ['鶏もも肉', 300, 'g'],
                    ['玉ねぎ', 1, '個'],
                    ['ニンジン', 1, '本'],
                    ['トマト缶', 1, '缶'],
                ],
                ベーコンとほうれん草: [
                    ['平ベーコン', 1, 'パック'],
                    ['冷凍ほうれん草', 0.5, '袋'],
                    ['厚あげ', 1, '個'],
                    ['かつお節', 1, '袋'],
                ],
                鮭しめじ: [
                    ['鮭', 2, '切れ'],
                    ['しめじ', 2, '株'],
                ],
                プルコギ: [
                    ['豚こま', 250, 'g'],
                    ['ニンジン', 1, '本'],
                    ['ピーマン', 4, '個'],
                ],
                豚キャベツ: [
                    ['豚こま', 250, 'g'],
                    ['キャベツ', 0.25, '個'],
                ],
                豚生姜焼き: [
                    ['豚こま', 250, 'g'],
                    ['玉ねぎ', 1, '個'],
                    ['刻み青ねぎ', 1, 'パック'],
                ],
                鶏ねぎ: [
                    ['鶏もも肉', 300, 'g'],
                    ['白ねぎ', 1, '本'],
                ],
                ナポリタン: [
                    ['ソーセージ', 1, '袋'],
                    ['エリンギ', 1, '個'],
                    ['ピーマン', 4, '個'],
                    ['グラタンの素', 1, '箱'],
                ],
                ラザニア: [
                    ['合挽肉', 300, 'g'],
                    ['ラザニアの素', 1, '箱'],
                    ['刻みチーズ', 1, '袋'],
                ],
                オムライス: [
                    ['ソーセージ', 1, '袋'],
                    ['マッシュルーム', 100, 'g'],
                    ['コーン缶', 1, '缶'],
                    ['卵', 3, '個'],
                    ['バター', 2, '個'],
                ],
                ドリア: [
                    ['ソーセージ', 1, '袋'],
                    ['マッシュルーム', 100, 'g'],
                    ['刻みチーズ', 1, '袋'],
                    ['卵', 2, '個'],
                ],
                三食丼: [
                    ['鶏もも挽肉', 250, 'g'],
                    ['冷凍ほうれん草', 0.5, '袋'],
                    ['卵', 3, '個'],
                ],
                焼きそば: [
                    ['豚こま', 250, 'g'],
                    ['焼きそば麺', 1.5, '袋'],
                    ['カット野菜', 1, '袋'],
                ],
                グラタン: [
                    ['鶏もも肉', 200, 'g'],
                    ['玉ねぎ', 1, '個'],
                    ['グラタンの素', 1, '箱'],
                    ['刻みチーズ', 1, '袋'],
                    ['バター', 2, '個'],
                ],
            };
            model.itemSets.push(...Object.keys(presetData).map(name => new ItemSet({ name: name })));
            model.items.push(...model.itemSets.flatMap(
                list => presetData[list.name].map(p => new Item({ name: p[0], amount: p[1], unit: p[2], belongingTo: list }))
            ));
        }
    </script>
</body>

</html>